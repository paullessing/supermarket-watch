{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx", "import"],
  "overrides": [
    {
      "files": ["*.ts"],
      "extends": [
        "plugin:@nrwl/nx/typescript",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],

        "brace-style": ["error", "1tbs"],
        "curly": "error",

        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off", // generally handled by strict mode
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-inferrable-types": "off", // I prefer the verbosity
        "@typescript-eslint/no-parameter-properties": [
          "error",
          { "allows": ["private readonly"] }
        ],
        "@typescript-eslint/no-unused-vars": "error",
        "max-len": "off", // checked by prettier

        "@typescript-eslint/no-empty-function": [
          "error"
        ],

        "sort-imports": [
          "error",
          {
            "ignoreDeclarationSort": true,
            "ignoreCase": true
          }
        ],
        "import/order": [
          "error",
          {
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            },
            "pathGroups": [
              {
                "pattern": "@shoppi/**",
                "group": "external",
                "position": "after"
              }
            ],
            "groups": ["builtin", "external", ["parent", "sibling"], "object"]
          }
        ]
      }
    }
  ],
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`

        // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default

        "project": [
          "tsconfig*.json"
        ]
      }
    }
  }
}
